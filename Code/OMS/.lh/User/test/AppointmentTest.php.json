{
    "sourceFile": "User/test/AppointmentTest.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 124,
            "patches": [
                {
                    "date": 1684016930678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1684017140479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n <?php\n-require_once('../Appointment.php');\n+@include_once('../Appointment.php');\n class AppointmentTest\n {\n     function testCompleted() // test correct para\n     {\n"
                },
                {
                    "date": 1684017237105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n <?php\n+\n+use PHPUnit\\Framework\\TestCase;\n+\n @include_once('../Appointment.php');\n-class AppointmentTest\n+class AppointmentTest extends TestCase\n {\n     function testCompleted() // test correct para\n     {\n         $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n"
                },
                {
                    "date": 1684017310381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('../Appointment.php');\n+require_once('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n     function testCompleted() // test correct para\n     {\n"
                },
                {
                    "date": 1684017315717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-require_once('../Appointment.php');\n+@include_once('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n     function testCompleted() // test correct para\n     {\n"
                },
                {
                    "date": 1684017355773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n {\n     function testCompleted() // test correct para\n     {\n         $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        return assert($assertvalue == True);\n+        return assert(True == True);\n     }\n }\n"
                },
                {
                    "date": 1684017368251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,8 @@\n class AppointmentTest extends TestCase\n {\n     function testCompleted() // test correct para\n     {\n-        $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        return assert(True == True);\n+        // $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n+        return assertTrue(True);\n     }\n }\n"
                },
                {
                    "date": 1684017380424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n {\n     function testCompleted() // test correct para\n     {\n         // $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        return assertTrue(True);\n+        return assertSame(True == True);\n     }\n }\n"
                },
                {
                    "date": 1684017386487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n {\n     function testCompleted() // test correct para\n     {\n         // $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        return assertSame(True == True);\n+        return assert(True == True);\n     }\n }\n"
                },
                {
                    "date": 1684017407720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n {\n     function testCompleted() // test correct para\n     {\n         // $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        return assert(True == True);\n+        assertEquals(True == True);\n     }\n }\n"
                },
                {
                    "date": 1684017413421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n {\n     function testCompleted() // test correct para\n     {\n         // $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        assertEquals(True == True);\n+        assertEquals(True, True);\n     }\n }\n"
                },
                {
                    "date": 1684019984990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,8 @@\n class AppointmentTest extends TestCase\n {\n     function testCompleted() // test correct para\n     {\n-        // $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n-        assertEquals(True, True);\n+        \n+        assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"););\n     }\n }\n"
                },
                {
                    "date": 1684020022057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,8 @@\n class AppointmentTest extends TestCase\n {\n     function testCompleted() // test correct para\n     {\n-        \n-        assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"););\n+\n+        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684020113838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n \n @include_once('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n-    function testCompleted() // test correct para\n+    public function testSuccess(): void // test correct para\n     {\n-\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684020140154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('../Appointment.php');\n+required('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684020146332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-required('../Appointment.php');\n+@include_once('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684020227260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('../Appointment.php');\n+require_once()('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684020261083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-require_once()('../Appointment.php');\n+@include_once('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684073554180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,91 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('../Appointment.php');\n class AppointmentTest extends TestCase\n {\n-    public function testSuccess(): void // test correct para\n+    function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n-        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n+        try {\n+            $validAppointment = False; //return Value\n+            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+                echo \"\\nMissing parameters\\n\";\n+                return $validAppointment;\n+            }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n+\n+            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+            // Create connection\n+            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+\n+            // Check connection\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n+\n+\n+            //checking if account exist\n+            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+\n+            // checking if account exists\n+            if ($existcheck->num_rows >= 1) {\n+                $DID = 0;\n+                $PID = 0;\n+                // Get the DID of the selected doctor\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n+                // Get the PID of the patient with the provided password\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n+\n+                // Split date and time\n+                $dateTime = explode(' ', $dateAndTime);\n+                $date = $dateTime[0]; // Date\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                    echo \"\\nWrong date type\\n\";\n+                    return $validAppointment;\n+                }\n+                $time = $dateTime[1]; // Time\n+\n+                // Update the doctor's available time\n+                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+                // $result = $mysqli->query($sql);\n+\n+                //insert the apppointment\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+                // $result = $mysqli->query($sql);\n+            }\n+            $validAppointment = True;\n+            // header(\"Location: ./Schedule.php\");\n+        } catch (mysqli_sql_exception $e) {\n+            echo \"Error: \" . $e->getMessage();\n+        }\n+\n+        return $validAppointment;\n     }\n+\n+    function testSuccess(): void // test correct para (can only execute once)\n+    //Because ConnectDB_Appointment will modify the data in DB, it cannot be executed more than one time in a roll\n+    {\n+        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n+    }\n+\n+    function testFailure_1(): void // invalid date type\n+    {\n+        self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n+    }\n+    function testFailure_2(): void // invalid date type\n+    {\n+        self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n+    }\n }\n"
                },
                {
                    "date": 1684073574039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n \n         return $validAppointment;\n     }\n \n-    function testSuccess(): void // test correct para (can only execute once)\n+    function testSuccess(): void // test correct para \n     //Because ConnectDB_Appointment will modify the data in DB, it cannot be executed more than one time in a roll\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684073581897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct para \n-    //Because ConnectDB_Appointment will modify the data in DB, it cannot be executed more than one time in a roll\n+\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n"
                },
                {
                    "date": 1684073645053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,11 +74,10 @@\n         return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct para \n-\n     {\n-        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n     function testFailure_1(): void // invalid date type\n     {\n"
                },
                {
                    "date": 1684073679725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     }\n \n     function testSuccess(): void // test correct para \n     {\n-        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n \n     function testFailure_1(): void // invalid date type\n     {\n"
                },
                {
                    "date": 1684074181027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\nWrong data type\\n\";\n+\n                 return $validAppointment;\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n"
                },
                {
                    "date": 1684074223192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-\n+                echo \"\\n\" . gettype($dateAndTime) . \"\\n\";\n                 return $validAppointment;\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n"
                },
                {
                    "date": 1684074234324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\n\" . gettype($dateAndTime) . \"\\n\";\n+                echo \"\\n\" . gettype($dateAndTime) . gettype($dateAndTime) . gettype($dateAndTime) . \"\\n\";\n                 return $validAppointment;\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n"
                },
                {
                    "date": 1684074263063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\n\" . gettype($dateAndTime) . gettype($dateAndTime) . gettype($dateAndTime) . \"\\n\";\n+            if (!is_Int($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"\\n\" . gettype($dateAndTime) . gettype($doctor) . gettype($passwd) . \"\\n\";\n                 return $validAppointment;\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n"
                },
                {
                    "date": 1684074277550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_Int($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\n\" . gettype($dateAndTime) . gettype($doctor) . gettype($passwd) . \"\\n\";\n                 return $validAppointment;\n             }\n \n"
                },
                {
                    "date": 1684074328493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            if (!is_Int($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\n\" . gettype($dateAndTime) . gettype($doctor) . gettype($passwd) . \"\\n\";\n                 return $validAppointment;\n             }\n \n"
                },
                {
                    "date": 1684077138044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n                 // $result = $mysqli->query($sql);\n             }\n             $validAppointment = True;\n             // header(\"Location: ./Schedule.php\");\n-        } catch (mysqli_sql_exception $e) {\n+        } catch (exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n         return $validAppointment;\n"
                },
                {
                    "date": 1684077237901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_Int($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\n\" . gettype($dateAndTime) . gettype($doctor) . gettype($passwd) . \"\\n\";\n+                echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n"
                },
                {
                    "date": 1684077296328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,8 @@\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 // $result = $mysqli->query($sql);\n             }\n             $validAppointment = True;\n-            // header(\"Location: ./Schedule.php\");\n         } catch (exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n"
                },
                {
                    "date": 1684077455964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,10 @@\n \n                 //insert the apppointment\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 // $result = $mysqli->query($sql);\n+                $validAppointment = True;\n             }\n-            $validAppointment = True;\n         } catch (exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n"
                },
                {
                    "date": 1684077541329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_Int($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n \n"
                },
                {
                    "date": 1684077560769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n+            // if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            //     echo \"\\nWrong data type\\n\";\n+            //     return $validAppointment;\n+            // }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684077574394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            // if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            //     echo \"\\nWrong data type\\n\";\n-            //     return $validAppointment;\n-            // }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684077583770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\nWrong data type\\n\";\n+                // echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n"
                },
                {
                    "date": 1684077593127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     {\n         try {\n             $validAppointment = False; //return Value\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                echo \"\\nMissing parameters\\n\";\n+                // echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 // echo \"\\nWrong data type\\n\";\n@@ -22,9 +22,9 @@\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n             // Check connection\n             if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                // echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n                 return $validAppointment; //return False\n             }\n \n \n"
                },
                {
                    "date": 1684077599430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n             // Check connection\n             if ($mysqli->connect_errno) { //there is error when connecting\n-                // echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n                 return $validAppointment; //return False\n             }\n \n \n@@ -51,9 +51,9 @@\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    echo \"\\nWrong date type\\n\";\n+                    // echo \"\\nWrong date type\\n\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n"
                },
                {
                    "date": 1684077681933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,17 +55,18 @@\n                     // echo \"\\nWrong date type\\n\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n+                $validAppointment = True;\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n                 // $result = $mysqli->query($sql);\n \n                 //insert the apppointment\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 // $result = $mysqli->query($sql);\n-                $validAppointment = True;\n+\n             }\n         } catch (exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n"
                },
                {
                    "date": 1684077688051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,15 +64,13 @@\n \n                 //insert the apppointment\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 // $result = $mysqli->query($sql);\n-\n+                return $validAppointment;\n             }\n         } catch (exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n-\n-        return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct para \n     {\n"
                },
                {
                    "date": 1684077717315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,72 +5,73 @@\n class AppointmentTest extends TestCase\n {\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n-        try {\n-            $validAppointment = False; //return Value\n-            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                // echo \"\\nMissing parameters\\n\";\n-                return $validAppointment;\n-            }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                // echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n+        // try {\n+        $validAppointment = False; //return Value\n+        if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+            // echo \"\\nMissing parameters\\n\";\n+            return $validAppointment;\n+        }\n+        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            // echo \"\\nWrong data type\\n\";\n+            return $validAppointment;\n+        }\n \n-            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-            // Create connection\n-            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+        // Create connection\n+        $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n-            // Check connection\n-            if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-                return $validAppointment; //return False\n-            }\n+        // Check connection\n+        if ($mysqli->connect_errno) { //there is error when connecting\n+            echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+            return $validAppointment; //return False\n+        }\n \n \n-            //checking if account exist\n-            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+        //checking if account exist\n+        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n \n-            // checking if account exists\n-            if ($existcheck->num_rows >= 1) {\n-                $DID = 0;\n-                $PID = 0;\n-                // Get the DID of the selected doctor\n-                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-                if ($dresult->num_rows == 1) {\n-                    $drow = $dresult->fetch_assoc();\n-                    $DID = $drow['DID'];\n-                }\n-                // Get the PID of the patient with the provided password\n-                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-                if ($presult->num_rows == 1) {\n-                    $prow = $presult->fetch_assoc();\n-                    $PID = $prow['PID'];\n-                }\n+        // checking if account exists\n+        if ($existcheck->num_rows >= 1) {\n+            $DID = 0;\n+            $PID = 0;\n+            // Get the DID of the selected doctor\n+            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+            if ($dresult->num_rows == 1) {\n+                $drow = $dresult->fetch_assoc();\n+                $DID = $drow['DID'];\n+            }\n+            // Get the PID of the patient with the provided password\n+            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+            if ($presult->num_rows == 1) {\n+                $prow = $presult->fetch_assoc();\n+                $PID = $prow['PID'];\n+            }\n \n-                // Split date and time\n-                $dateTime = explode(' ', $dateAndTime);\n-                $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    // echo \"\\nWrong date type\\n\";\n-                    return $validAppointment;\n-                }\n-                $time = $dateTime[1]; // Time\n-                $validAppointment = True;\n+            // Split date and time\n+            $dateTime = explode(' ', $dateAndTime);\n+            $date = $dateTime[0]; // Date\n+            if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                // echo \"\\nWrong date type\\n\";\n+                return $validAppointment;\n+            }\n+            $time = $dateTime[1]; // Time\n+            $validAppointment = True;\n \n-                // Update the doctor's available time\n-                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-                // $result = $mysqli->query($sql);\n+            // Update the doctor's available time\n+            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+            // $result = $mysqli->query($sql);\n \n-                //insert the apppointment\n-                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-                // $result = $mysqli->query($sql);\n-                return $validAppointment;\n-            }\n-        } catch (exception $e) {\n-            echo \"Error: \" . $e->getMessage();\n+            //insert the apppointment\n+            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+            // $result = $mysqli->query($sql);\n+            return $validAppointment;\n         }\n+        // } catch (exception $e) {\n+        //     echo \"Error: \" . $e->getMessage();\n+        // }\n+        return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct para \n     {\n"
                },
                {
                    "date": 1684077743968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n             // echo \"\\nWrong data type\\n\";\n             return $validAppointment;\n         }\n \n-        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+        // mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n         // Create connection\n         $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n         // Check connection\n"
                },
                {
                    "date": 1684077756748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n             // echo \"\\nWrong data type\\n\";\n             return $validAppointment;\n         }\n \n-        // mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n         // Create connection\n         $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n         // Check connection\n"
                },
                {
                    "date": 1684104496235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n         // }\n         return $validAppointment;\n     }\n \n-    function testSuccess(): void // test correct para \n+    function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n \n"
                },
                {
                    "date": 1684116309216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class AppointmentTest extends TestCase\n {\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n-        // try {\n+        try {\n         $validAppointment = False; //return Value\n         if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n             // echo \"\\nMissing parameters\\n\";\n             return $validAppointment;\n"
                },
                {
                    "date": 1684116317378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,71 +6,71 @@\n {\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n-        $validAppointment = False; //return Value\n-        if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-            // echo \"\\nMissing parameters\\n\";\n-            return $validAppointment;\n-        }\n-        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            // echo \"\\nWrong data type\\n\";\n-            return $validAppointment;\n-        }\n+            $validAppointment = False; //return Value\n+            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+                // echo \"\\nMissing parameters\\n\";\n+                return $validAppointment;\n+            }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                // echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n \n-        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-        // Create connection\n-        $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+            // Create connection\n+            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n-        // Check connection\n-        if ($mysqli->connect_errno) { //there is error when connecting\n-            echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-            return $validAppointment; //return False\n-        }\n+            // Check connection\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n \n \n-        //checking if account exist\n-        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+            //checking if account exist\n+            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n \n-        // checking if account exists\n-        if ($existcheck->num_rows >= 1) {\n-            $DID = 0;\n-            $PID = 0;\n-            // Get the DID of the selected doctor\n-            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-            if ($dresult->num_rows == 1) {\n-                $drow = $dresult->fetch_assoc();\n-                $DID = $drow['DID'];\n-            }\n-            // Get the PID of the patient with the provided password\n-            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-            if ($presult->num_rows == 1) {\n-                $prow = $presult->fetch_assoc();\n-                $PID = $prow['PID'];\n-            }\n+            // checking if account exists\n+            if ($existcheck->num_rows >= 1) {\n+                $DID = 0;\n+                $PID = 0;\n+                // Get the DID of the selected doctor\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n+                // Get the PID of the patient with the provided password\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n \n-            // Split date and time\n-            $dateTime = explode(' ', $dateAndTime);\n-            $date = $dateTime[0]; // Date\n-            if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                // echo \"\\nWrong date type\\n\";\n+                // Split date and time\n+                $dateTime = explode(' ', $dateAndTime);\n+                $date = $dateTime[0]; // Date\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                    // echo \"\\nWrong date type\\n\";\n+                    return $validAppointment;\n+                }\n+                $time = $dateTime[1]; // Time\n+                $validAppointment = True;\n+\n+                // Update the doctor's available time\n+                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+                // $result = $mysqli->query($sql);\n+\n+                //insert the apppointment\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+                // $result = $mysqli->query($sql);\n                 return $validAppointment;\n             }\n-            $time = $dateTime[1]; // Time\n-            $validAppointment = True;\n-\n-            // Update the doctor's available time\n-            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-            // $result = $mysqli->query($sql);\n-\n-            //insert the apppointment\n-            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-            // $result = $mysqli->query($sql);\n-            return $validAppointment;\n+        } catch (exception $e) {\n+            echo \"Error: \" . $e->getMessage();\n         }\n-        // } catch (exception $e) {\n-        //     echo \"Error: \" . $e->getMessage();\n-        // }\n         return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct parameters\n"
                },
                {
                    "date": 1684116382458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    // echo \"\\nWrong date type\\n\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n                 $validAppointment = True;\n"
                },
                {
                    "date": 1684116390969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    return $validAppointment;\n-                }\n+                // if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                //     return $validAppointment;\n+                // }\n                 $time = $dateTime[1]; // Time\n                 $validAppointment = True;\n \n                 // Update the doctor's available time\n"
                },
                {
                    "date": 1684116396905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                // if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                //     return $validAppointment;\n-                // }\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                    return $validAppointment;\n+                }\n                 $time = $dateTime[1]; // Time\n                 $validAppointment = True;\n \n                 // Update the doctor's available time\n"
                },
                {
                    "date": 1684116409244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n             // Check connection\n-            if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-                return $validAppointment; //return False\n-            }\n+            // if ($mysqli->connect_errno) { //there is error when connecting\n+            //     echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+            //     return $validAppointment; //return False\n+            // }\n \n \n             //checking if account exist\n             $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n"
                },
                {
                    "date": 1684116418881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,12 @@\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n-            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                // echo \"\\nMissing parameters\\n\";\n-                return $validAppointment;\n-            }\n+            // if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+            //     // echo \"\\nMissing parameters\\n\";\n+            //     return $validAppointment;\n+            // }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 // echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n@@ -21,12 +21,12 @@\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n             // Check connection\n-            // if ($mysqli->connect_errno) { //there is error when connecting\n-            //     echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-            //     return $validAppointment; //return False\n-            // }\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n \n \n             //checking if account exist\n             $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n"
                },
                {
                    "date": 1684116425940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,16 @@\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n-            // if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-            //     // echo \"\\nMissing parameters\\n\";\n+            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+                // echo \"\\nMissing parameters\\n\";\n+                return $validAppointment;\n+            }\n+            // if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            //     // echo \"\\nWrong data type\\n\";\n             //     return $validAppointment;\n             // }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                // echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684116431606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 // echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            // if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            //     // echo \"\\nWrong data type\\n\";\n-            //     return $validAppointment;\n-            // }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                // echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684116447936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n-            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\");\n \n             // Check connection\n             if ($mysqli->connect_errno) { //there is error when connecting\n                 echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n"
                },
                {
                    "date": 1684116458453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n-            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\");\n+            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n             // Check connection\n             if ($mysqli->connect_errno) { //there is error when connecting\n                 echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n"
                },
                {
                    "date": 1684116482307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,13 @@\n             if ($existcheck->num_rows >= 1) {\n                 $DID = 0;\n                 $PID = 0;\n                 // Get the DID of the selected doctor\n-                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-                if ($dresult->num_rows == 1) {\n-                    $drow = $dresult->fetch_assoc();\n-                    $DID = $drow['DID'];\n-                }\n+                // $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                // if ($dresult->num_rows == 1) {\n+                //     $drow = $dresult->fetch_assoc();\n+                //     $DID = $drow['DID'];\n+                // }\n                 // Get the PID of the patient with the provided password\n                 $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n                 if ($presult->num_rows == 1) {\n                     $prow = $presult->fetch_assoc();\n"
                },
                {
                    "date": 1684116490529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,13 @@\n             if ($existcheck->num_rows >= 1) {\n                 $DID = 0;\n                 $PID = 0;\n                 // Get the DID of the selected doctor\n-                // $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-                // if ($dresult->num_rows == 1) {\n-                //     $drow = $dresult->fetch_assoc();\n-                //     $DID = $drow['DID'];\n-                // }\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n                 // Get the PID of the patient with the provided password\n                 $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n                 if ($presult->num_rows == 1) {\n                     $prow = $presult->fetch_assoc();\n"
                },
                {
                    "date": 1684116526785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,13 @@\n                     $drow = $dresult->fetch_assoc();\n                     $DID = $drow['DID'];\n                 }\n                 // Get the PID of the patient with the provided password\n-                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-                if ($presult->num_rows == 1) {\n-                    $prow = $presult->fetch_assoc();\n-                    $PID = $prow['PID'];\n-                }\n+                // $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                // if ($presult->num_rows == 1) {\n+                //     $prow = $presult->fetch_assoc();\n+                //     $PID = $prow['PID'];\n+                // }\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n"
                },
                {
                    "date": 1684116541032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,13 @@\n                     $drow = $dresult->fetch_assoc();\n                     $DID = $drow['DID'];\n                 }\n                 // Get the PID of the patient with the provided password\n-                // $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-                // if ($presult->num_rows == 1) {\n-                //     $prow = $presult->fetch_assoc();\n-                //     $PID = $prow['PID'];\n-                // }\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n"
                },
                {
                    "date": 1684116587638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class AppointmentTest extends TestCase\n {\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n-        try {\n+        // try {\n             $validAppointment = False; //return Value\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 // echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n"
                },
                {
                    "date": 1684116592784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,70 +6,70 @@\n {\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         // try {\n-            $validAppointment = False; //return Value\n-            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                // echo \"\\nMissing parameters\\n\";\n-                return $validAppointment;\n-            }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                // echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n+        $validAppointment = False; //return Value\n+        if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+            // echo \"\\nMissing parameters\\n\";\n+            return $validAppointment;\n+        }\n+        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            // echo \"\\nWrong data type\\n\";\n+            return $validAppointment;\n+        }\n \n-            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-            // Create connection\n-            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+        // Create connection\n+        $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n-            // Check connection\n-            if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-                return $validAppointment; //return False\n-            }\n+        // Check connection\n+        if ($mysqli->connect_errno) { //there is error when connecting\n+            echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+            return $validAppointment; //return False\n+        }\n \n \n-            //checking if account exist\n-            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+        //checking if account exist\n+        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n \n-            // checking if account exists\n-            if ($existcheck->num_rows >= 1) {\n-                $DID = 0;\n-                $PID = 0;\n-                // Get the DID of the selected doctor\n-                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-                if ($dresult->num_rows == 1) {\n-                    $drow = $dresult->fetch_assoc();\n-                    $DID = $drow['DID'];\n-                }\n-                // Get the PID of the patient with the provided password\n-                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-                if ($presult->num_rows == 1) {\n-                    $prow = $presult->fetch_assoc();\n-                    $PID = $prow['PID'];\n-                }\n+        // checking if account exists\n+        if ($existcheck->num_rows >= 1) {\n+            $DID = 0;\n+            $PID = 0;\n+            // Get the DID of the selected doctor\n+            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+            if ($dresult->num_rows == 1) {\n+                $drow = $dresult->fetch_assoc();\n+                $DID = $drow['DID'];\n+            }\n+            // Get the PID of the patient with the provided password\n+            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+            if ($presult->num_rows == 1) {\n+                $prow = $presult->fetch_assoc();\n+                $PID = $prow['PID'];\n+            }\n \n-                // Split date and time\n-                $dateTime = explode(' ', $dateAndTime);\n-                $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    return $validAppointment;\n-                }\n-                $time = $dateTime[1]; // Time\n-                $validAppointment = True;\n+            // Split date and time\n+            $dateTime = explode(' ', $dateAndTime);\n+            $date = $dateTime[0]; // Date\n+            if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                return $validAppointment;\n+            }\n+            $time = $dateTime[1]; // Time\n+            $validAppointment = True;\n \n-                // Update the doctor's available time\n-                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-                // $result = $mysqli->query($sql);\n+            // Update the doctor's available time\n+            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+            // $result = $mysqli->query($sql);\n \n-                //insert the apppointment\n-                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-                // $result = $mysqli->query($sql);\n-                return $validAppointment;\n-            }\n-        } catch (exception $e) {\n-            echo \"Error: \" . $e->getMessage();\n+            //insert the apppointment\n+            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+            // $result = $mysqli->query($sql);\n+            return $validAppointment;\n         }\n+        // } catch (exception $e) {\n+        //     echo \"Error: \" . $e->getMessage();\n+        // }\n         return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct parameters\n"
                },
                {
                    "date": 1684116726451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         }\n \n         mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n         // Create connection\n-        $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+        $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n \n         // Check connection\n         if ($mysqli->connect_errno) { //there is error when connecting\n             echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n"
                },
                {
                    "date": 1684116816578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,11 @@\n         // }\n         return $validAppointment;\n     }\n \n+    /**\n+     * @doesNotPerformAssertions\n+     */\n     function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684116822300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,13 +78,18 @@\n     function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n-\n+    /**\n+     * @doesNotPerformAssertions\n+     */\n     function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n+    /**\n+     * @doesNotPerformAssertions\n+     */\n     function testFailure_2(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684116827582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     /**\n      * @doesNotPerformAssertions\n      */\n-    function testFailure_2(): void // invalid date type\n+    public function testFailure_2(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684116833242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,16 +74,16 @@\n \n     /**\n      * @doesNotPerformAssertions\n      */\n-    function testSuccess(): void // test correct parameters\n+    public function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n     /**\n      * @doesNotPerformAssertions\n      */\n-    function testFailure_1(): void // invalid date type\n+    public function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n     /**\n"
                },
                {
                    "date": 1684116852183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,9 @@\n         // }\n         return $validAppointment;\n     }\n \n-    /**\n-     * @doesNotPerformAssertions\n-     */\n+\n     public function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684116857769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,8 @@\n     public function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n-    /**\n-     * @doesNotPerformAssertions\n-     */\n     public function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684116887049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,71 +5,71 @@\n class AppointmentTest extends TestCase\n {\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n-        // try {\n-        $validAppointment = False; //return Value\n-        if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-            // echo \"\\nMissing parameters\\n\";\n-            return $validAppointment;\n-        }\n-        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            // echo \"\\nWrong data type\\n\";\n-            return $validAppointment;\n-        }\n+        try {\n+            $validAppointment = False; //return Value\n+            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+                // echo \"\\nMissing parameters\\n\";\n+                return $validAppointment;\n+            }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                // echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n \n-        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-        // Create connection\n-        $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n+            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+            // Create connection\n+            $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n \n-        // Check connection\n-        if ($mysqli->connect_errno) { //there is error when connecting\n-            echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-            return $validAppointment; //return False\n-        }\n+            // Check connection\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n \n \n-        //checking if account exist\n-        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+            //checking if account exist\n+            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n \n-        // checking if account exists\n-        if ($existcheck->num_rows >= 1) {\n-            $DID = 0;\n-            $PID = 0;\n-            // Get the DID of the selected doctor\n-            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-            if ($dresult->num_rows == 1) {\n-                $drow = $dresult->fetch_assoc();\n-                $DID = $drow['DID'];\n-            }\n-            // Get the PID of the patient with the provided password\n-            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-            if ($presult->num_rows == 1) {\n-                $prow = $presult->fetch_assoc();\n-                $PID = $prow['PID'];\n-            }\n+            // checking if account exists\n+            if ($existcheck->num_rows >= 1) {\n+                $DID = 0;\n+                $PID = 0;\n+                // Get the DID of the selected doctor\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n+                // Get the PID of the patient with the provided password\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n \n-            // Split date and time\n-            $dateTime = explode(' ', $dateAndTime);\n-            $date = $dateTime[0]; // Date\n-            if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                // Split date and time\n+                $dateTime = explode(' ', $dateAndTime);\n+                $date = $dateTime[0]; // Date\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                    return $validAppointment;\n+                }\n+                $time = $dateTime[1]; // Time\n+                $validAppointment = True;\n+\n+                // Update the doctor's available time\n+                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+                // $result = $mysqli->query($sql);\n+\n+                //insert the apppointment\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+                // $result = $mysqli->query($sql);\n                 return $validAppointment;\n             }\n-            $time = $dateTime[1]; // Time\n-            $validAppointment = True;\n-\n-            // Update the doctor's available time\n-            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-            // $result = $mysqli->query($sql);\n-\n-            //insert the apppointment\n-            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-            // $result = $mysqli->query($sql);\n-            return $validAppointment;\n+        } catch (exception $e) {\n+            echo \"Error: \" . $e->getMessage();\n         }\n-        // } catch (exception $e) {\n-        //     echo \"Error: \" . $e->getMessage();\n-        // }\n         return $validAppointment;\n     }\n \n \n@@ -80,11 +80,8 @@\n     public function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n-    /**\n-     * @doesNotPerformAssertions\n-     */\n     public function testFailure_2(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684116906554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     {\n         try {\n             $validAppointment = False; //return Value\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                // echo \"\\nMissing parameters\\n\";\n+                echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 // echo \"\\nWrong data type\\n\";\n"
                },
                {
                    "date": 1684116915928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,8 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                // echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684116921956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,12 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684116943976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,18 @@\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n \n+\n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n \n"
                },
                {
                    "date": 1684116960317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            if (!is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n"
                },
                {
                    "date": 1684116966449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n-            if (!is_String($doctor) || !is_String($passwd)) {\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n"
                },
                {
                    "date": 1684116973415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,8 @@\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n-            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                echo \"\\nMissing parameters\\n\";\n-                return $validAppointment;\n-            }\n \n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n"
                },
                {
                    "date": 1684117088882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n                 }\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n-                $date = $dateTime[0]; // Date\n+                // $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n"
                },
                {
                    "date": 1684117096971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                 // $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n                     return $validAppointment;\n                 }\n-                $time = $dateTime[1]; // Time\n+                // $time = $dateTime[1]; // Time\n                 $validAppointment = True;\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684117108823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,13 @@\n                 }\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n-                // $date = $dateTime[0]; // Date\n+                $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n                     return $validAppointment;\n                 }\n-                // $time = $dateTime[1]; // Time\n+                $time = $dateTime[1]; // Time\n                 $validAppointment = True;\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684117175441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,10 +71,12 @@\n \n \n     public function testSuccess(): void // test correct parameters\n     {\n-        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n+        $appointmentTest = new AppointmentTest();\n+        self::assertEquals(True, $appointmentTest->ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n+\n     public function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684117329893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,13 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n+    public function __construct(?string $name = null, array $data = [], $dataName = '')\n+    {\n+        parent::__construct($name, $data, $dataName);\n+    }\n+\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n"
                },
                {
                    "date": 1684117350447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,8 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    public function __construct(?string $name = null, array $data = [], $dataName = '')\n-    {\n-        parent::__construct($name, $data, $dataName);\n-    }\n-\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n"
                },
                {
                    "date": 1684117374752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \n     public function testSuccess(): void // test correct parameters\n     {\n         $appointmentTest = new AppointmentTest();\n-        self::assertEquals(True, $appointmentTest->ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n+        self::assertEquals(True, $this->ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n"
                },
                {
                    "date": 1684117394643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,10 +71,9 @@\n \n \n     public function testSuccess(): void // test correct parameters\n     {\n-        $appointmentTest = new AppointmentTest();\n-        self::assertEquals(True, $this->ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n+        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n"
                },
                {
                    "date": 1684117407282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,74 +3,11 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n-    {\n-        try {\n-            $validAppointment = False; //return Value\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n \n \n-            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-            // Create connection\n-            $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n \n-            // Check connection\n-            if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-                return $validAppointment; //return False\n-            }\n-\n-\n-            //checking if account exist\n-            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n-\n-            // checking if account exists\n-            if ($existcheck->num_rows >= 1) {\n-                $DID = 0;\n-                $PID = 0;\n-                // Get the DID of the selected doctor\n-                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-                if ($dresult->num_rows == 1) {\n-                    $drow = $dresult->fetch_assoc();\n-                    $DID = $drow['DID'];\n-                }\n-                // Get the PID of the patient with the provided password\n-                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-                if ($presult->num_rows == 1) {\n-                    $prow = $presult->fetch_assoc();\n-                    $PID = $prow['PID'];\n-                }\n-\n-                // Split date and time\n-                $dateTime = explode(' ', $dateAndTime);\n-                $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    return $validAppointment;\n-                }\n-                $time = $dateTime[1]; // Time\n-                $validAppointment = True;\n-\n-                // Update the doctor's available time\n-                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-                // $result = $mysqli->query($sql);\n-\n-                //insert the apppointment\n-                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-                // $result = $mysqli->query($sql);\n-                return $validAppointment;\n-            }\n-        } catch (exception $e) {\n-            echo \"Error: \" . $e->getMessage();\n-        }\n-        return $validAppointment;\n-    }\n-\n-\n     public function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684117417162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,76 @@\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n-        self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n     public function testFailure_2(): void // invalid date type\n     {\n-        self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n+\n+function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+{\n+    try {\n+        $validAppointment = False; //return Value\n+        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            echo \"\\nWrong data type\\n\";\n+            return $validAppointment;\n+        }\n+\n+\n+        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+        // Create connection\n+        $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n+\n+        // Check connection\n+        if ($mysqli->connect_errno) { //there is error when connecting\n+            echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+            return $validAppointment; //return False\n+        }\n+\n+\n+        //checking if account exist\n+        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+\n+        // checking if account exists\n+        if ($existcheck->num_rows >= 1) {\n+            $DID = 0;\n+            $PID = 0;\n+            // Get the DID of the selected doctor\n+            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+            if ($dresult->num_rows == 1) {\n+                $drow = $dresult->fetch_assoc();\n+                $DID = $drow['DID'];\n+            }\n+            // Get the PID of the patient with the provided password\n+            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+            if ($presult->num_rows == 1) {\n+                $prow = $presult->fetch_assoc();\n+                $PID = $prow['PID'];\n+            }\n+\n+            // Split date and time\n+            $dateTime = explode(' ', $dateAndTime);\n+            $date = $dateTime[0]; // Date\n+            if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                return $validAppointment;\n+            }\n+            $time = $dateTime[1]; // Time\n+            $validAppointment = True;\n+\n+            // Update the doctor's available time\n+            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+            // $result = $mysqli->query($sql);\n+\n+            //insert the apppointment\n+            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+            // $result = $mysqli->query($sql);\n+            return $validAppointment;\n+        }\n+    } catch (exception $e) {\n+        echo \"Error: \" . $e->getMessage();\n+    }\n+    return $validAppointment;\n+}\n"
                },
                {
                    "date": 1684117426915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,8 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-\n-\n-\n     public function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684117433511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n \n-function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+public function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n {\n     try {\n         $validAppointment = False; //return Value\n         if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n"
                },
                {
                    "date": 1684117439259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n \n-public function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+static function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n {\n     try {\n         $validAppointment = False; //return Value\n         if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n"
                },
                {
                    "date": 1684117447476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,9 @@\n     {\n         self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n-\n-static function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n {\n     try {\n         $validAppointment = False; //return Value\n         if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n"
                },
                {
                    "date": 1684117470027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     {\n         self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n-function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+function ConnectDB_Appointment($dateAndTime, $doctor, $passwd): bool\n {\n     try {\n         $validAppointment = False; //return Value\n         if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n"
                },
                {
                    "date": 1684117495506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n             echo \"\\nWrong data type\\n\";\n             return $validAppointment;\n         }\n \n-\n         mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n         // Create connection\n         $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n \n"
                },
                {
                    "date": 1684117646314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct parameters\n     {\n-        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20 08:30:00\", \"Rodriguez\", \"yuan0000\"));\n+        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n@@ -36,9 +36,8 @@\n             echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n             return $validAppointment; //return False\n         }\n \n-\n         //checking if account exist\n         $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n \n         // checking if account exists\n"
                },
                {
                    "date": 1684117767657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,21 @@\n     public function testSuccess(): void // test correct parameters\n     {\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n     }\n+    public function testSuccess_2(): void // test correct parameters\n+    {\n+        $dateAndTime = \"2023-04-20 08:30:00\";\n+        $doctor = \"Rodriguez\";\n+        $passwd = \"yuan0000\";\n \n+        self::assertInternalType('string', $dateAndTime);\n+        self::assertInternalType('string', $doctor);\n+        self::assertInternalType('string', $passwd);\n+\n+        self::assertEquals(True, ConnectDB_Appointment($dateAndTime, $doctor, $passwd));\n+    }\n+\n     public function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684117841843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,11 @@\n         $dateAndTime = \"2023-04-20 08:30:00\";\n         $doctor = \"Rodriguez\";\n         $passwd = \"yuan0000\";\n \n-        self::assertInternalType('string', $dateAndTime);\n-        self::assertInternalType('string', $doctor);\n-        self::assertInternalType('string', $passwd);\n+        self::assertIsString('string', $dateAndTime);\n+        self::assertIsString($doctor);\n+        self::assertIsString('string', $passwd);\n \n         self::assertEquals(True, ConnectDB_Appointment($dateAndTime, $doctor, $passwd));\n     }\n \n"
                },
                {
                    "date": 1684117853715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,21 +3,21 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n+    // public function testSuccess(): void // test correct parameters\n+    // {\n+    //     self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n+    // }\n     public function testSuccess(): void // test correct parameters\n     {\n-        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n-    }\n-    public function testSuccess_2(): void // test correct parameters\n-    {\n         $dateAndTime = \"2023-04-20 08:30:00\";\n         $doctor = \"Rodriguez\";\n         $passwd = \"yuan0000\";\n \n-        self::assertIsString('string', $dateAndTime);\n+        self::assertIsString($dateAndTime);\n         self::assertIsString($doctor);\n-        self::assertIsString('string', $passwd);\n+        self::assertIsString($passwd);\n \n         self::assertEquals(True, ConnectDB_Appointment($dateAndTime, $doctor, $passwd));\n     }\n \n"
                },
                {
                    "date": 1684117902474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,23 +3,23 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    // public function testSuccess(): void // test correct parameters\n-    // {\n-    //     self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n-    // }\n     public function testSuccess(): void // test correct parameters\n     {\n+        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n+    }\n+    public function testSuccess_2(): void // test correct parameters\n+    {\n         $dateAndTime = \"2023-04-20 08:30:00\";\n         $doctor = \"Rodriguez\";\n         $passwd = \"yuan0000\";\n \n         self::assertIsString($dateAndTime);\n         self::assertIsString($doctor);\n         self::assertIsString($passwd);\n \n-        self::assertEquals(True, ConnectDB_Appointment($dateAndTime, $doctor, $passwd));\n+        // self::assertEquals(True, ConnectDB_Appointment($dateAndTime, $doctor, $passwd));\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n"
                },
                {
                    "date": 1684118066530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,12 +33,8 @@\n function ConnectDB_Appointment($dateAndTime, $doctor, $passwd): bool\n {\n     try {\n         $validAppointment = False; //return Value\n-        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            echo \"\\nWrong data type\\n\";\n-            return $validAppointment;\n-        }\n \n         mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n         // Create connection\n         $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684118121861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,12 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    public function testSuccess(): void // test correct parameters\n-    {\n-        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n-    }\n+    // public function testSuccess(): void // test correct parameters\n+    // {\n+    //     self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n+    // }\n     public function testSuccess_2(): void // test correct parameters\n     {\n         $dateAndTime = \"2023-04-20 08:30:00\";\n         $doctor = \"Rodriguez\";\n"
                },
                {
                    "date": 1684118249621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,18 @@\n     // public function testSuccess(): void // test correct parameters\n     // {\n     //     self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n     // }\n+    public function testSuccess(): void // test correct parameters\n+    {\n+        ob_start(); // start output buffering\n+        $result = ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\");\n+        $output = ob_get_clean(); // capture output and stop buffering\n+\n+        self::assertTrue($result);\n+        self::assertStringNotContainsString('Wrong data type', $output); // check that output does not contain the error message\n+    }\n+\n     public function testSuccess_2(): void // test correct parameters\n     {\n         $dateAndTime = \"2023-04-20 08:30:00\";\n         $doctor = \"Rodriguez\";\n@@ -75,13 +85,11 @@\n             $validAppointment = True;\n \n             // Update the doctor's available time\n             $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-            // $result = $mysqli->query($sql);\n \n             //insert the apppointment\n             $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-            // $result = $mysqli->query($sql);\n             return $validAppointment;\n         }\n     } catch (exception $e) {\n         echo \"Error: \" . $e->getMessage();\n"
                },
                {
                    "date": 1684118463360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,15 +76,16 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            $date = $dateTime[0]; // Date\n-            if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                return $validAppointment;\n+            if (count($dateTime) >= 2) {\n+                $date = $dateTime[0]; // Date\n+                $time = $dateTime[1]; // Time\n+            } else {\n+                // handle the case where the array does not have enough elements\n             }\n-            $time = $dateTime[1]; // Time\n-            $validAppointment = True;\n \n+\n             // Update the doctor's available time\n             $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n \n             //insert the apppointment\n"
                },
                {
                    "date": 1684118557024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,15 +76,19 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n+            var_dump($this->storage);\n+            var_dump($this->key);\n+\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n                 // handle the case where the array does not have enough elements\n             }\n \n+            $validAppointment = True;\n \n             // Update the doctor's available time\n             $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n \n"
                },
                {
                    "date": 1684118562170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,10 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            var_dump($this->storage);\n-            var_dump($this->key);\n+            var_dump($dateAndTime->storage);\n+            var_dump($dateAndTime->key);\n \n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n"
                },
                {
                    "date": 1684118695340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            var_dump($dateAndTime->storage);\n+            var_dump(self::storage);\n             var_dump($dateAndTime->key);\n \n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n"
                },
                {
                    "date": 1684118713881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,8 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            var_dump(self::storage);\n-            var_dump($dateAndTime->key);\n \n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n"
                },
                {
                    "date": 1684118727717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-\n+            echo \"{$dateAndTime}\";\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684118753085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            echo \"{$dateAndTime}\";\n+            echo \"{$dateTime}\";\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684118762537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            echo \"{$dateTime}\";\n+            echo \"{$dateTime[0]}\";\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684118777062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode(' ', $dateAndTime);\n-            echo \"{$dateTime[0]}\";\n+            echo \"\\n{$dateTime[0]}\";\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684118799201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n                 $PID = $prow['PID'];\n             }\n \n             // Split date and time\n-            $dateTime = explode(' ', $dateAndTime);\n+            $dateTime = explode('T', $dateAndTime);\n             echo \"\\n{$dateTime[0]}\";\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n"
                },
                {
                    "date": 1684118829281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     }\n \n     public function testSuccess_2(): void // test correct parameters\n     {\n-        $dateAndTime = \"2023-04-20 08:30:00\";\n+        $dateAndTime = \"2023-04-20T08:30:00\";\n         $doctor = \"Rodriguez\";\n         $passwd = \"yuan0000\";\n \n         self::assertIsString($dateAndTime);\n"
                },
                {
                    "date": 1684118872874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode('T', $dateAndTime);\n-            echo \"\\n{$dateTime[0]}\";\n+            echo \"\\n{count($dateTime)}\";\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684118888322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             }\n \n             // Split date and time\n             $dateTime = explode('T', $dateAndTime);\n-            echo \"\\n{count($dateTime)}\";\n+            echo \"\\n\" . count($dateTime);\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684119013667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,8 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    // public function testSuccess(): void // test correct parameters\n-    // {\n-    //     self::assertEquals(True, ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\"));\n-    // }\n     public function testSuccess(): void // test correct parameters\n     {\n         ob_start(); // start output buffering\n         $result = ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\");\n"
                },
                {
                    "date": 1684119043419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,8 @@\n             echo \"\\n\" . count($dateTime);\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n-            } else {\n-                // handle the case where the array does not have enough elements\n-            }\n \n             $validAppointment = True;\n \n             // Update the doctor's available time\n"
                },
                {
                    "date": 1684119061828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,10 @@\n             echo \"\\n\" . count($dateTime);\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n+            } else {\n+            }\n \n             $validAppointment = True;\n \n             // Update the doctor's available time\n"
                },
                {
                    "date": 1684119069241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,10 @@\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n+                $date = $dateTime[0]; // Date\n+                $time = $dateTime[1]; // Time\n             }\n \n             $validAppointment = True;\n \n"
                },
                {
                    "date": 1684119079972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n                 $date = $dateTime[0]; // Date\n-                $time = $dateTime[1]; // Time\n+                $time = null; // Time\n             }\n \n             $validAppointment = True;\n \n"
                },
                {
                    "date": 1684119091800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n                 $date = $dateTime[0]; // Date\n-                $time = null; // Time\n+                $time = $dateTime[1]; // Time\n             }\n \n             $validAppointment = True;\n \n"
                },
                {
                    "date": 1684119103632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,9 @@\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n-                $date = $dateTime[0]; // Date\n-                $time = $dateTime[1]; // Time\n+                return $validAppointment;\n             }\n \n             $validAppointment = True;\n \n"
                },
                {
                    "date": 1684119122168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,8 @@\n             }\n \n             // Split date and time\n             $dateTime = explode('T', $dateAndTime);\n-            echo \"\\n\" . count($dateTime);\n             if (count($dateTime) >= 2) {\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n             } else {\n"
                },
                {
                    "date": 1684119449403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,66 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n+    function ConnectDB_Appointment($dateAndTime, $doctor, $passwd): bool\n+    {\n+        try {\n+            $validAppointment = False; //return Value\n+\n+            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+            // Create connection\n+            $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n+\n+            // Check connection\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n+\n+            //checking if account exist\n+            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+\n+            // checking if account exists\n+            if ($existcheck->num_rows >= 1) {\n+                $DID = 0;\n+                $PID = 0;\n+                // Get the DID of the selected doctor\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n+                // Get the PID of the patient with the provided password\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n+\n+                // Split date and time\n+                $dateTime = explode('T', $dateAndTime);\n+                if (count($dateTime) >= 2) {\n+                    $date = $dateTime[0]; // Date\n+                    $time = $dateTime[1]; // Time\n+                } else {\n+                    return $validAppointment;\n+                }\n+\n+                $validAppointment = True;\n+\n+                // Update the doctor's available time\n+                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+\n+                //insert the apppointment\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n+                return $validAppointment;\n+            }\n+        } catch (exception $e) {\n+            echo \"Error: \" . $e->getMessage();\n+        }\n+        return $validAppointment;\n+    }\n     public function testSuccess(): void // test correct parameters\n     {\n         ob_start(); // start output buffering\n         $result = ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\");\n@@ -35,62 +93,4 @@\n     {\n         self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n-function ConnectDB_Appointment($dateAndTime, $doctor, $passwd): bool\n-{\n-    try {\n-        $validAppointment = False; //return Value\n-\n-        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-        // Create connection\n-        $mysqli = new mysqli(\"127.0.0.1\", \"root\", \"\", \"oms\", 3306);\n-\n-        // Check connection\n-        if ($mysqli->connect_errno) { //there is error when connecting\n-            echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n-            return $validAppointment; //return False\n-        }\n-\n-        //checking if account exist\n-        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n-\n-        // checking if account exists\n-        if ($existcheck->num_rows >= 1) {\n-            $DID = 0;\n-            $PID = 0;\n-            // Get the DID of the selected doctor\n-            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-            if ($dresult->num_rows == 1) {\n-                $drow = $dresult->fetch_assoc();\n-                $DID = $drow['DID'];\n-            }\n-            // Get the PID of the patient with the provided password\n-            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-            if ($presult->num_rows == 1) {\n-                $prow = $presult->fetch_assoc();\n-                $PID = $prow['PID'];\n-            }\n-\n-            // Split date and time\n-            $dateTime = explode('T', $dateAndTime);\n-            if (count($dateTime) >= 2) {\n-                $date = $dateTime[0]; // Date\n-                $time = $dateTime[1]; // Time\n-            } else {\n-                return $validAppointment;\n-            }\n-\n-            $validAppointment = True;\n-\n-            // Update the doctor's available time\n-            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-\n-            //insert the apppointment\n-            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n-            return $validAppointment;\n-        }\n-    } catch (exception $e) {\n-        echo \"Error: \" . $e->getMessage();\n-    }\n-    return $validAppointment;\n-}\n"
                },
                {
                    "date": 1684119462952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     }\n     public function testSuccess(): void // test correct parameters\n     {\n         ob_start(); // start output buffering\n-        $result = ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\");\n+        $result = self::ConnectDB_Appointment(\"2023-04-20T08:30\", \"Rodriguez\", \"yuan0000\");\n         $output = ob_get_clean(); // capture output and stop buffering\n \n         self::assertTrue($result);\n         self::assertStringNotContainsString('Wrong data type', $output); // check that output does not contain the error message\n@@ -80,10 +80,8 @@\n \n         self::assertIsString($dateAndTime);\n         self::assertIsString($doctor);\n         self::assertIsString($passwd);\n-\n-        // self::assertEquals(True, ConnectDB_Appointment($dateAndTime, $doctor, $passwd));\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n"
                },
                {
                    "date": 1684119469149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,11 @@\n     }\n \n     public function testFailure_1(): void // invalid date type\n     {\n-        self::assertEquals(False, ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n     public function testFailure_2(): void // invalid date type\n     {\n-        self::assertEquals(False, ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                }
            ],
            "date": 1684016930678,
            "name": "Commit-0",
            "content": "<?php\nrequire_once('../Appointment.php');\nclass AppointmentTest\n{\n    function testCompleted() // test correct para\n    {\n        $assertvalue = ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\");\n        return assert($assertvalue == True);\n    }\n}\n"
        }
    ]
}