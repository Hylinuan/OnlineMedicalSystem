{
    "sourceFile": "User/AppointmentTest.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 62,
            "patches": [
                {
                    "date": 1684020316118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1684020326650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('./Appointment.php');\n+@include_once('Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684020357258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('Appointment.php');\n+@include_once('./Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684020637853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n+set_include_path(\"/Users/hsuan/Desktop/OMS\");\n @include_once('./Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n"
                },
                {
                    "date": 1684020948694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-set_include_path(\"/Users/hsuan/Desktop/OMS\");\n @include_once('./Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n"
                },
                {
                    "date": 1684020968995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('./Appointment.php');\n+@include_once('Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684021015287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('Appointment.php');\n+@include_once('./Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684021031079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-@include_once('./Appointment.php');\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684021040071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,76 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n+function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+{\n+    try {\n+        $validAppointment = False; //return Value\n+        if ($dateAndTime = \"Undefined\" || $doctor = \"Undefined\" || $passwd = \"Undefined\") {\n+            return $validAppointment;\n+        }\n+        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            return $validAppointment;\n+        }\n+\n+        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+        // Create connection\n+        $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+\n+        // Check connection\n+        if ($mysqli->connect_errno) { //there is error when connecting\n+            echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n+            return $validAppointment; //return False\n+        }\n+\n+\n+        //checking if account exist\n+        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+\n+        // checking if account exists\n+        if ($existcheck->num_rows >= 1) {\n+            $DID = 0;\n+            $PID = 0;\n+            // Get the DID of the selected doctor\n+            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+            if ($dresult->num_rows == 1) {\n+                $drow = $dresult->fetch_assoc();\n+                $DID = $drow['DID'];\n+            }\n+            // Get the PID of the patient with the provided password\n+            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+            if ($presult->num_rows == 1) {\n+                $prow = $presult->fetch_assoc();\n+                $PID = $prow['PID'];\n+            }\n+\n+\n+\n+            // Split date and time\n+            $dateTime = explode(' ', $dateAndTime);\n+            $date = $dateTime[0]; // Date\n+            $time = $dateTime[1]; // Time\n+\n+            // Update the doctor's available time\n+            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+            $result = $mysqli->query($sql);\n+\n+            //insert the apppointment\n+            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','NULL');\";\n+            $result = $mysqli->query($sql);\n+        }\n+\n+        header(\"Location: ./Schedule.php\");\n+    } catch (mysqli_sql_exception $e) {\n+        echo \"Error: \" . $e->getMessage();\n+    }\n+\n+    $mysqli->close();\n+    $validAppointment = True;\n+    return $validAppointment;\n+}\n+\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684021076031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +1,8 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n-{\n-    try {\n-        $validAppointment = False; //return Value\n-        if ($dateAndTime = \"Undefined\" || $doctor = \"Undefined\" || $passwd = \"Undefined\") {\n-            return $validAppointment;\n-        }\n-        if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            return $validAppointment;\n-        }\n-\n-        mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-        // Create connection\n-        $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n-\n-        // Check connection\n-        if ($mysqli->connect_errno) { //there is error when connecting\n-            echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n-            return $validAppointment; //return False\n-        }\n-\n-\n-        //checking if account exist\n-        $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n-\n-        // checking if account exists\n-        if ($existcheck->num_rows >= 1) {\n-            $DID = 0;\n-            $PID = 0;\n-            // Get the DID of the selected doctor\n-            $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-            if ($dresult->num_rows == 1) {\n-                $drow = $dresult->fetch_assoc();\n-                $DID = $drow['DID'];\n-            }\n-            // Get the PID of the patient with the provided password\n-            $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-            if ($presult->num_rows == 1) {\n-                $prow = $presult->fetch_assoc();\n-                $PID = $prow['PID'];\n-            }\n-\n-\n-\n-            // Split date and time\n-            $dateTime = explode(' ', $dateAndTime);\n-            $date = $dateTime[0]; // Date\n-            $time = $dateTime[1]; // Time\n-\n-            // Update the doctor's available time\n-            $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-            $result = $mysqli->query($sql);\n-\n-            //insert the apppointment\n-            $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','NULL');\";\n-            $result = $mysqli->query($sql);\n-        }\n-\n-        header(\"Location: ./Schedule.php\");\n-    } catch (mysqli_sql_exception $e) {\n-        echo \"Error: \" . $e->getMessage();\n-    }\n-\n-    $mysqli->close();\n-    $validAppointment = True;\n-    return $validAppointment;\n-}\n-\n class AppointmentTest extends TestCase\n {\n     public function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684021098993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,76 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    public function testSuccess(): void // test correct para\n+    function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n+        try {\n+            $validAppointment = False; //return Value\n+            if ($dateAndTime = \"Undefined\" || $doctor = \"Undefined\" || $passwd = \"Undefined\") {\n+                return $validAppointment;\n+            }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                return $validAppointment;\n+            }\n+\n+            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+            // Create connection\n+            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+\n+            // Check connection\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n+\n+\n+            //checking if account exist\n+            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+\n+            // checking if account exists\n+            if ($existcheck->num_rows >= 1) {\n+                $DID = 0;\n+                $PID = 0;\n+                // Get the DID of the selected doctor\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n+                // Get the PID of the patient with the provided password\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n+\n+\n+\n+                // Split date and time\n+                $dateTime = explode(' ', $dateAndTime);\n+                $date = $dateTime[0]; // Date\n+                $time = $dateTime[1]; // Time\n+\n+                // Update the doctor's available time\n+                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+                $result = $mysqli->query($sql);\n+\n+                //insert the apppointment\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','NULL');\";\n+                $result = $mysqli->query($sql);\n+            }\n+\n+            header(\"Location: ./Schedule.php\");\n+        } catch (mysqli_sql_exception $e) {\n+            echo \"Error: \" . $e->getMessage();\n+        }\n+\n+        $mysqli->close();\n+        $validAppointment = True;\n+        return $validAppointment;\n+    }\n+    function testSuccess(): void // test correct para\n+    {\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684021111678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,75 +3,9 @@\n use PHPUnit\\Framework\\TestCase;\n \n class AppointmentTest extends TestCase\n {\n-    function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n-    {\n-        try {\n-            $validAppointment = False; //return Value\n-            if ($dateAndTime = \"Undefined\" || $doctor = \"Undefined\" || $passwd = \"Undefined\") {\n-                return $validAppointment;\n-            }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                return $validAppointment;\n-            }\n \n-            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n-            // Create connection\n-            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n-\n-            // Check connection\n-            if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n-                return $validAppointment; //return False\n-            }\n-\n-\n-            //checking if account exist\n-            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n-\n-            // checking if account exists\n-            if ($existcheck->num_rows >= 1) {\n-                $DID = 0;\n-                $PID = 0;\n-                // Get the DID of the selected doctor\n-                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n-                if ($dresult->num_rows == 1) {\n-                    $drow = $dresult->fetch_assoc();\n-                    $DID = $drow['DID'];\n-                }\n-                // Get the PID of the patient with the provided password\n-                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n-                if ($presult->num_rows == 1) {\n-                    $prow = $presult->fetch_assoc();\n-                    $PID = $prow['PID'];\n-                }\n-\n-\n-\n-                // Split date and time\n-                $dateTime = explode(' ', $dateAndTime);\n-                $date = $dateTime[0]; // Date\n-                $time = $dateTime[1]; // Time\n-\n-                // Update the doctor's available time\n-                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n-                $result = $mysqli->query($sql);\n-\n-                //insert the apppointment\n-                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','NULL');\";\n-                $result = $mysqli->query($sql);\n-            }\n-\n-            header(\"Location: ./Schedule.php\");\n-        } catch (mysqli_sql_exception $e) {\n-            echo \"Error: \" . $e->getMessage();\n-        }\n-\n-        $mysqli->close();\n-        $validAppointment = True;\n-        return $validAppointment;\n-    }\n     function testSuccess(): void // test correct para\n     {\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n     }\n"
                },
                {
                    "date": 1684021117935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,76 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-class AppointmentTest extends TestCase\n-{\n \n+    function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n+    {\n+        try {\n+            $validAppointment = False; //return Value\n+            if ($dateAndTime = \"Undefined\" || $doctor = \"Undefined\" || $passwd = \"Undefined\") {\n+                return $validAppointment;\n+            }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                return $validAppointment;\n+            }\n+\n+            mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n+            // Create connection\n+            $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n+\n+            // Check connection\n+            if ($mysqli->connect_errno) { //there is error when connecting\n+                echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n+                return $validAppointment; //return False\n+            }\n+\n+\n+            //checking if account exist\n+            $existcheck = $mysqli->query(\"SELECT * FROM (SELECT DISTINCT `password` FROM Paccount) AS users WHERE `password` = '{$passwd}';\");\n+\n+            // checking if account exists\n+            if ($existcheck->num_rows >= 1) {\n+                $DID = 0;\n+                $PID = 0;\n+                // Get the DID of the selected doctor\n+                $dresult = $mysqli->query(\"SELECT `DID` FROM `Daccount` WHERE `lastName` = '{$doctor}';\");\n+                if ($dresult->num_rows == 1) {\n+                    $drow = $dresult->fetch_assoc();\n+                    $DID = $drow['DID'];\n+                }\n+                // Get the PID of the patient with the provided password\n+                $presult = $mysqli->query(\"SELECT `PID` FROM `Paccount` WHERE `password` = '{$passwd}';\");\n+                if ($presult->num_rows == 1) {\n+                    $prow = $presult->fetch_assoc();\n+                    $PID = $prow['PID'];\n+                }\n+\n+\n+\n+                // Split date and time\n+                $dateTime = explode(' ', $dateAndTime);\n+                $date = $dateTime[0]; // Date\n+                $time = $dateTime[1]; // Time\n+\n+                // Update the doctor's available time\n+                $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n+                $result = $mysqli->query($sql);\n+\n+                //insert the apppointment\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','NULL');\";\n+                $result = $mysqli->query($sql);\n+            }\n+\n+            header(\"Location: ./Schedule.php\");\n+        } catch (mysqli_sql_exception $e) {\n+            echo \"Error: \" . $e->getMessage();\n+        }\n+\n+        $mysqli->close();\n+        $validAppointment = True;\n+        return $validAppointment;\n+    }\n     function testSuccess(): void // test correct para\n     {\n         self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n     }\n"
                },
                {
                    "date": 1684021129188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n <?php\n \n use PHPUnit\\Framework\\TestCase;\n \n-\n+class AppointmentTest extends TestCase\n+{\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n"
                },
                {
                    "date": 1684021145113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,7 +72,7 @@\n         return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n     {\n-        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n+        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684021192307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,7 +72,7 @@\n         return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n     {\n-        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n+        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"joshua0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026304606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,18 @@\n     function ConnectDB_Appointment($dateAndTime, $doctor, $passwd)\n     {\n         try {\n             $validAppointment = False; //return Value\n-            if ($dateAndTime = \"Undefined\" || $doctor = \"Undefined\" || $passwd = \"Undefined\") {\n+            if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 return $validAppointment;\n             }\n+            if ($passwd != $_COOKIE['password']) {\n+                echo \"<script>alert(Wrong password!)</script>\";\n+                return $validAppointment;\n+            }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n@@ -57,9 +61,9 @@\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n                 $result = $mysqli->query($sql);\n \n                 //insert the apppointment\n-                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','NULL');\";\n+                $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 $result = $mysqli->query($sql);\n             }\n \n             header(\"Location: ./Schedule.php\");\n"
                },
                {
                    "date": 1684026333268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,7 +76,7 @@\n         return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n     {\n-        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"joshua0000\"));\n+        self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026340863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,12 @@\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 return $validAppointment;\n             }\n-            if ($passwd != $_COOKIE['password']) {\n-                echo \"<script>alert(Wrong password!)</script>\";\n-                return $validAppointment;\n-            }\n+            // if ($passwd != $_COOKIE['password']) {\n+            //     echo \"<script>alert(Wrong password!)</script>\";\n+            //     return $validAppointment;\n+            // }\n \n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n"
                },
                {
                    "date": 1684026370456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n-        $mysqli->close();\n+        // $mysqli->close();\n         $validAppointment = True;\n         return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n"
                },
                {
                    "date": 1684026384361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,8 @@\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n-        // $mysqli->close();\n         $validAppointment = True;\n         return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n"
                },
                {
                    "date": 1684026412824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,5 +77,10 @@\n     function testSuccess(): void // test correct para\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n+\n+    function testFailure()\n+    {\n+        self::assertEquals(False, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n+    }\n }\n"
                },
                {
                    "date": 1684026417858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,7 +80,7 @@\n     }\n \n     function testFailure()\n     {\n-        self::assertEquals(False, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, self::ConnectDB_Appointment(2023-04-03 17:00:00, \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026427203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n-    function testFailure()\n+    function testFailure_1() //\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023-04-03 17:00:00, \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026439451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n-    function testFailure_1() //\n+    function testFailure_1() // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023-04-03 17:00:00, \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026453787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,7 +80,7 @@\n     }\n \n     function testFailure_1() // invalid date type\n     {\n-        self::assertEquals(False, self::ConnectDB_Appointment(2023-04-03 17:00:00, \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026467759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,5 +82,9 @@\n     function testFailure_1() // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n+    function testFailure_2() // invalid date type\n+    {\n+        self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n+    }\n }\n"
                },
                {
                    "date": 1684026492002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,7 +84,7 @@\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n     function testFailure_2() // invalid date type\n     {\n-        self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n+        self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684026597406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n                     $PID = $prow['PID'];\n                 }\n \n \n-\n+                if (preg_match('/\\s/', $dateAndTime)) {\n+                }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 $time = $dateTime[1]; // Time\n"
                },
                {
                    "date": 1684026607126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                     $PID = $prow['PID'];\n                 }\n \n \n-                if (preg_match('/\\s/', $dateAndTime)) {\n+                if (!preg_match('/\\s/', $dateAndTime)) {\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n"
                },
                {
                    "date": 1684026620808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n                 }\n \n \n                 if (!preg_match('/\\s/', $dateAndTime)) {\n+                    return $validAppointment;\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n"
                },
                {
                    "date": 1684026730437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,10 @@\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n+                }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684026741046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n+                    return $validAppointment\n                 }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n"
                },
                {
                    "date": 1684026775737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,10 @@\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n-                    return $validAppointment\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date) || preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $time)) {\n+                    return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n"
                },
                {
                    "date": 1684026855529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date) || preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $time)) {\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date) || ) {\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n"
                },
                {
                    "date": 1684026901244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date) || ) {\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n@@ -71,13 +71,14 @@\n                 $result = $mysqli->query($sql);\n             }\n \n             header(\"Location: ./Schedule.php\");\n+            $validAppointment = True;\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n-        $validAppointment = True;\n+\n         return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n     {\n"
                },
                {
                    "date": 1684026918823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,10 @@\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 $result = $mysqli->query($sql);\n             }\n \n+            $validAppointment = True;\n             header(\"Location: ./Schedule.php\");\n-            $validAppointment = True;\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n         }\n \n"
                },
                {
                    "date": 1684026926007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,15 +71,14 @@\n                 $result = $mysqli->query($sql);\n             }\n \n             $validAppointment = True;\n-            header(\"Location: ./Schedule.php\");\n+            return $validAppointment;\n+            // header(\"Location: ./Schedule.php\");\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n+            return $validAppointment;\n         }\n-\n-\n-        return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n"
                },
                {
                    "date": 1684026958615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n-                    return $validAppointment;\n-                }\n+                // if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n+                //     return $validAppointment;\n+                // }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684026964481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n                 }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                // if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n-                //     return $validAppointment;\n-                // }\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n+                    return $validAppointment;\n+                }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684026995999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,13 @@\n \n                 //insert the apppointment\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 $result = $mysqli->query($sql);\n+                $validAppointment = True;\n+                return $validAppointment;\n             }\n \n-            $validAppointment = True;\n-            return $validAppointment;\n+\n             // header(\"Location: ./Schedule.php\");\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n             return $validAppointment;\n"
                },
                {
                    "date": 1684027002731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,8 @@\n                 $validAppointment = True;\n                 return $validAppointment;\n             }\n \n-\n             // header(\"Location: ./Schedule.php\");\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n             return $validAppointment;\n"
                },
                {
                    "date": 1684027015868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,17 +68,16 @@\n \n                 //insert the apppointment\n                 $sql = \"INSERT INTO `Appointment`(`DID`, `PID`, `date`, `time`, `prescription`) VALUES ('{$DID}','{$PID}','{$date}','{$time}','');\";\n                 $result = $mysqli->query($sql);\n-                $validAppointment = True;\n-                return $validAppointment;\n             }\n-\n+            $validAppointment = True;\n             // header(\"Location: ./Schedule.php\");\n         } catch (mysqli_sql_exception $e) {\n             echo \"Error: \" . $e->getMessage();\n-            return $validAppointment;\n         }\n+\n+        return $validAppointment;\n     }\n     function testSuccess(): void // test correct para\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n"
                },
                {
                    "date": 1684027032403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,12 +49,8 @@\n                     $prow = $presult->fetch_assoc();\n                     $PID = $prow['PID'];\n                 }\n \n-\n-                if (!preg_match('/\\s/', $dateAndTime)) {\n-                    return $validAppointment;\n-                }\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n"
                },
                {
                    "date": 1684027092720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n+                    echo \"Wrong date type\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n"
                },
                {
                    "date": 1684027123668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"Wrong data type\";\n                 return $validAppointment;\n             }\n             // if ($passwd != $_COOKIE['password']) {\n             //     echo \"<script>alert(Wrong password!)</script>\";\n"
                },
                {
                    "date": 1684027135968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     {\n         try {\n             $validAppointment = False; //return Value\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n+                echo \"Missing parameters\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"Wrong data type\";\n"
                },
                {
                    "date": 1684027283863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/\", $date)) {\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n                     echo \"Wrong date type\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n"
                },
                {
                    "date": 1684027300692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 echo \"Missing parameters\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"Wrong data type\";\n+                echo \"Wrong data type\\n\";\n                 return $validAppointment;\n             }\n             // if ($passwd != $_COOKIE['password']) {\n             //     echo \"<script>alert(Wrong password!)</script>\";\n"
                },
                {
                    "date": 1684027316061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     {\n         try {\n             $validAppointment = False; //return Value\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                echo \"Missing parameters\";\n+                echo \"Missing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"Wrong data type\\n\";\n@@ -55,9 +55,9 @@\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    echo \"Wrong date type\";\n+                    echo \"\\nWrong date type\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n"
                },
                {
                    "date": 1684027325194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n                 if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    echo \"\\nWrong date type\";\n+                    echo \"\\nWrong date type\\n\";\n                     return $validAppointment;\n                 }\n                 $time = $dateTime[1]; // Time\n \n"
                },
                {
                    "date": 1684027330520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n             // Check connection\n             if ($mysqli->connect_errno) { //there is error when connecting\n-                echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n+                echo \"\\nFailed to connect to MySQL: \" . $mysqli->connect_error;\n                 return $validAppointment; //return False\n             }\n \n \n"
                },
                {
                    "date": 1684027336506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,13 @@\n     {\n         try {\n             $validAppointment = False; //return Value\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n-                echo \"Missing parameters\\n\";\n+                echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"Wrong data type\\n\";\n+                echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n             // if ($passwd != $_COOKIE['password']) {\n             //     echo \"<script>alert(Wrong password!)</script>\";\n"
                },
                {
                    "date": 1684027387356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,12 +54,8 @@\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n-                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n-                    echo \"\\nWrong date type\\n\";\n-                    return $validAppointment;\n-                }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684027393697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,12 @@\n \n                 // Split date and time\n                 $dateTime = explode(' ', $dateAndTime);\n                 $date = $dateTime[0]; // Date\n+                if (!preg_match(\"/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(0[1-9]|1[0-9]|2[0-4]):(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/\", $date)) {\n+                    echo \"\\nWrong date type\\n\";\n+                    return $validAppointment;\n+                }\n                 $time = $dateTime[1]; // Time\n \n                 // Update the doctor's available time\n                 $sql = \"UPDATE `ScheduleTime` SET `PID` = '{$PID}' WHERE `DID` = '{$DID}' AND `date` = '{$date}' AND `startT` = '{$time}';\";\n"
                },
                {
                    "date": 1684027565558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n         }\n \n         return $validAppointment;\n     }\n+\n     function testSuccess(): void // test correct para\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n"
                },
                {
                    "date": 1684027570977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,13 +82,13 @@\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n-    function testFailure_1() // invalid date type\n+    function testFailure_1(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment(2023 - 04 - 03, \"Johnson\", \"yuan0000\"));\n     }\n-    function testFailure_2() // invalid date type\n+    function testFailure_2(): void // invalid date type\n     {\n         self::assertEquals(False, self::ConnectDB_Appointment('2023/04/03', \"Johnson\", \"yuan0000\"));\n     }\n }\n"
                },
                {
                    "date": 1684027615952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-                echo \"\\nWrong data type\\n\";\n-                return $validAppointment;\n-            }\n+            // if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+            //     echo \"\\nWrong data type\\n\";\n+            //     return $validAppointment;\n+            // }\n             // if ($passwd != $_COOKIE['password']) {\n             //     echo \"<script>alert(Wrong password!)</script>\";\n             //     return $validAppointment;\n             // }\n"
                },
                {
                    "date": 1684027622595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n             if ($dateAndTime == \"Undefined\" || $doctor == \"Undefined\" || $passwd == \"Undefined\") {\n                 echo \"\\nMissing parameters\\n\";\n                 return $validAppointment;\n             }\n-            // if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n-            //     echo \"\\nWrong data type\\n\";\n-            //     return $validAppointment;\n-            // }\n+            if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n+                echo \"\\nWrong data type\\n\";\n+                return $validAppointment;\n+            }\n             // if ($passwd != $_COOKIE['password']) {\n             //     echo \"<script>alert(Wrong password!)</script>\";\n             //     return $validAppointment;\n             // }\n"
                },
                {
                    "date": 1684028080482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,8 @@\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n-            // if ($passwd != $_COOKIE['password']) {\n-            //     echo \"<script>alert(Wrong password!)</script>\";\n-            //     return $validAppointment;\n-            // }\n-\n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n"
                },
                {
                    "date": 1684028250196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n             if (!is_String($dateAndTime) || !is_String($doctor) || !is_String($passwd)) {\n                 echo \"\\nWrong data type\\n\";\n                 return $validAppointment;\n             }\n+\n             mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n             // Create connection\n             $mysqli = new mysqli(\"localhost\", \"root\", \"\", \"oms\", 3306);\n \n@@ -72,9 +73,9 @@\n \n         return $validAppointment;\n     }\n \n-    function testSuccess(): void // test correct para\n+    function testSuccess(): void // test correct para (can only execute once)\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n"
                },
                {
                    "date": 1684028344901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n         return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct para (can only execute once)\n+    //Because ConnectDB_Appointment will modify the data in DB, \n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n"
                },
                {
                    "date": 1684028386927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         return $validAppointment;\n     }\n \n     function testSuccess(): void // test correct para (can only execute once)\n-    //Because ConnectDB_Appointment will modify the data in DB, \n+    //Because ConnectDB_Appointment will modify the data in DB, it cannot be executed more than one time in a roll\n     {\n         self::assertEquals(True, self::ConnectDB_Appointment(\"2023-04-03 17:00:00\", \"Johnson\", \"yuan0000\"));\n     }\n \n"
                }
            ],
            "date": 1684020316118,
            "name": "Commit-0",
            "content": "<?php\n\nuse PHPUnit\\Framework\\TestCase;\n\n@include_once('./Appointment.php');\nclass AppointmentTest extends TestCase\n{\n    public function testSuccess(): void // test correct para\n    {\n        self::assertEquals(True, ConnectDB_Appointment(\"2023-04-03\", \"Johnson\", \"joshua0000\"));\n    }\n}\n"
        }
    ]
}